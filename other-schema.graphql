


###############################
##### Pool-Level Metadata #####
###############################

# A pool can be:
# - A liquidity pool in the case of a DEX AMM
# - A market in the case of a lending protocol
# - A vault in the case of a yield aggregator
interface Pool {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD (volume is defined differently according to the protocol category) "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
}

#################################
##### Pool-Level Timeseries #####
#################################

interface PoolDailySnapshot {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  pool: Pool!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigDecimal!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

enum LendingType {
  " Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market "
  CDP

  " Pooled protocols pool all users assets into a single market "
  POOLED
}

enum RiskType {
  " Global risk means each users position in a market is combined for one score to determine if they can be liquidated "
  GLOBAL

  " Isolated risk means each users position in a market or CDP is isolated for risk of liquidation "
  ISOLATED
}

type LendingProtocol implements Protocol @entity {
  " UUID "
  id: ID!

  " Name of the protocol, including version. e.g. Aave v2 "
  name: String!

  " Slug of protocol, including version. e.g. aave-v2 "
  slug: String!

  network: Network!

  type: ProtocolType!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Lending-Specific #####

  " All markets that belong to this protocol "
  markets: [Market!]! @derivedFrom(field: "protocol")

  lendingType: LendingType

  riskType: RiskType
}

type Market implements Pool @entity {
  " Smart contract address of the market "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total borrow volume in USD (i.e. total loan origination ) "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [MarketDailySnapshot!]! @derivedFrom(field: "market")

  ##### Lending-Specific #####

  " Name of market "
  name: String

  isActive: Boolean!

  canUseAsCollateral: Boolean!

  canBorrowFrom: Boolean!

  " Maximum loan-to-value ratio as a percentage value "
  maximumLTV: BigDecimal!

  " Liquidation threshold as a percentage value "
  liquidationThreshold: BigDecimal!

  " Liquidation penalty as a percentage value "
  liquidationPenalty: BigDecimal!

  " Deposit interest rate in percentage "
  depositRate: BigDecimal!

  " Borrow interest rate in percentage "
  stableBorrowRate: BigDecimal!

  " Borrow interest rate in percentage "
  variableBorrowRate: BigDecimal!

  deposits: [Deposit]! @derivedFrom(field: "pool")

  withdraws: [Withdraw]! @derivedFrom(field: "pool")

  borrows: [Borrow]! @derivedFrom(field: "pool")

  repays: [Repay]! @derivedFrom(field: "pool")

  liquidations: [Liquidation]! @derivedFrom(field: "pool")
}

type MarketDailySnapshot implements PoolDailySnapshot @entity {
  " { Smart contract address of the market }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  market: Market!

  totalValueLockedUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: BigDecimal!

  " Price per share of input token in USD "
  inputTokenPricesUSD: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigDecimal!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Lending-Specific #####

  " Deposit interest rate in percentage "
  depositRate: BigDecimal!

  " Borrow interest rate in percentage "
  stableBorrowRate: BigDecimal!

  " Borrow interest rate in percentage "
  variableBorrowRate: BigDecimal!
}

##################################
##### Transaction-Level Data #####
##################################

interface Transaction {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!
}

type Deposit implements Transaction @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigDecimal!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!
}

type Withdraw implements Transaction @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigDecimal!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!
}

type Borrow implements Transaction @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are borrowed from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The pool this transaction interacted with "
  pool: Market!

  " Token borrowed "
  asset: Token!

  " Amount of token borrowed in native units "
  amount: BigDecimal!

  " Amount of token borrowed in USD "
  amountUSD: BigDecimal
}

type Repay implements Transaction @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The pool this transaction interacted with "
  pool: Market!

  " Token repaid "
  asset: Token!

  " Amount of token repaid in native units "
  amount: BigDecimal!

  " Amount of token repaid in USD "
  amountUSD: BigDecimal
}

type Liquidation implements Transaction @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that carried out the liquidation "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The pool this transaction interacted with "
  pool: Market!

  " Token liquidated "
  asset: Token!

  " Amount of token liquidated in native units "
  amount: BigDecimal!

  " Amount of token liquidated in USD "
  amountUSD: BigDecimal

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal
}